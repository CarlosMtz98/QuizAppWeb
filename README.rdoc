= Application Design and Architecture

November 28, 2022

This documentation was developed as part of the project for the <em>Software Design and Architecture</em> course (_Tc3049_), at the Tecnológico de Monterrey, Campus Estado de México.

== Authors

* *A01375577* <em>Carlos Martínez Rodríguez</em>
* *A01374561* <em>José Francisco Murillo Lozano</em>

== Installing and Running the Application

Use this section to explain any details on how to install and run you application.

You need to have Ruby 2.7 or better, as well as the
{Sinatra}[http://www.sinatrarb.com/],
{Shotgun}[https://rubygems.org/gems/shotgun/versions/0.9.2],
{Faraday}[https://lostisland.github.io/faraday/] and
{Rack}[https://rubygems.org/gems/rack/versions/1.6.4] gems
in your system to run the _QuizAppWeb_ web application.

To install the required gems you can use the following command at the terminal from the +QuizAppWeb+ directory:

    $ bundle install

To run the server type any of the following commands at the terminal from the +QuizAppWeb+ directory:

    $ shotgun

    $ rackup config.ru

    $ ruby src/controller/application_controller.rb -s puma

Afterwards, point your web browser the server’s root URL.

== Simple graphical representation of the QuizAppWeb application

rdoc-image:img/overview.png

== 4+1 Architectural View Model

=== Logical View

The following figure represents the UML class diagram for the models and controller:

rdoc-image:img/class_diagram.png

=== Process View

rdoc-image:img/activity_diagram.png

=== Development View

The development view focuses on software modules and subsystems. In UML, <em>package diagrams</em> are used to model the development view.

rdoc-image:img/package_diagram.png

=== Physical View

The physical view describes the physical deployment of the system, revealing which pieces of software run on what pieces of hardware. In UML, <em>deployment diagrams</em> are used to model the physical view.

rdoc-image:img/deployment_diagram.png

=== Scenarios

This view describes the functionality of the system from the perspective from outside world. It contains diagrams describing what the system is supposed to do from a black box perspective. UML <em>use case diagrams</em> are used for this view.

rdoc-image:img/use_case_diagram.png

== Design Patterns Used

- <b>Domain-Specific Language</b>: The +application_controller.rb+ file consists of a series of Sinatra _routes_. Sinatra is a DSL for creating web applications in Ruby.
- <b>Model-View-Controller</b>: The application follows the classical web implementation of the MVC architectural pattern. The models (+.rb+ files) and views (+.erb+ files) are stored in the corresponding +src/models+ and +src/views+ directory. The controller is contained in +application_controller.rb+ file under the +src/controller+.
- <b>Singleton</b>: The +Quiz+ class implements a singleton pattern (by session).
- <b>Simple Factory</b>: The microservices implement uses this Design Pattern.

== References

- \M. Fowler. <em>UML Distilled: A Brief Guide to the Standard Object Modeling Language, 3rd Edition.</em>  Addison-Wesley, 2003.

- \E. Gamma, R. Helm, R. Johnson, J. M. Vlissides. <em>Design Patterns: Elements of Reusable Object-Oriented Software.</em> Addison-Wesley, 1994.

- \A. Harris, K. Haase. <em>Sinatra: Up and Running.</em> O’Reilly, 2011.

- \Ph. Kruchten. <em>The 4+1 View Model of Architecture.</em> IEEE Software, vol. 12 (6), pp. 45-50, 1995. {\http://www.ics.uci.edu/~andre/ics223w2006/kruchten3.pdf}[http://www.ics.uci.edu/~andre/ics223w2006/kruchten3.pdf] Accessed November 28, 2022.

- \R. Olsen. <em>Design Patterns in Ruby.</em> Addison-Wesley, 2007.

- Ruby-Doc.org. <em>RDoc Markup Reference.</em> {\http://ruby-doc.org/stdlib-3.0.0/libdoc/rdoc/rdoc/RDoc/Markup.html}[https://ruby-doc.org/stdlib-3.0.0/libdoc/rdoc/rdoc/RDoc/Markup.html] Accessed November 28, 2022.
